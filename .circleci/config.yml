version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  slack: circleci/slack@4.2.1


parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"
  memstash-token:
    type: string
    default: "da647fff-0676-4705-a4fd-bda47a1e6aaa"
    
    
commands:
  destroy-environment:
    description: Destroy cloudformation stacks given a workflow ID.  
    steps:
      - run: 
          name: install dependencies
          when: on_fail
          command: |
            pip install awscli
      - run:
          name: Destroy  environment
          when: on_fail
          command: |
            echo "Destroying environment: udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS="$(curl -H 'token: 7f92f427-54ab-40ca-878a-ff9f059d253a' --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})"
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
              exit 1
            fi

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            npm install
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules, frontend/dist]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Back-end build
          command: |
            ls -la
            cd backend
            npm i
            npm run build
            ls -la
      - save_cache:
          paths: [backend/node_modules, backend/dist]
          key: backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Run Test on Frontend
          command: |
            npm install oauth-sign
            ls -la
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run: 
          name: Run Test on backend
          command: |
            ls -la
            cd backend
            npm run test


  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend-scan
          command: |
            npm install oauth-sign
            npm install
            cd frontend
            npm install
#            npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}            
      - run:
          name: backend-scan
          command: |
            npm install
            cd backend
            npm install
#            npm audit fix --audit-level=critical --force

  deploy-infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
              
      - run:
          name: Ensure that the frontend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udaPeople
              ARN=$(aws s3 ls | grep udapeople)
              echo "ARN=$ARN"
              curl -H "Content-Type: text/plain" -H "token: da647fff-0676-4705-a4fd-bda47a1e6aaa" --request PUT \
              --data "$ARN" https://api.memstash.io/values/arn_${CIRCLE_WORKFLOW_ID:0:7}
      - run: 
          name: install tar gzip and curl
          command: |
            yum -y install tar 
            yum -y install gzip
            yum -y install curl
      - run: 
          name: install python3-pip
          command: |
            yum -y install python3-pip                        
      - run:
          name: Add backend IP to inventory file
          command: |
            export WorkFlowID="${CIRCLE_WORKFLOW_ID:0:7}"
            echo "Workflow id: $WorkFlowID"
            aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filters "Name=tag:Name,Values=backend-$WorkFlowID" --output text > /tmp/ip
            echo "Found IP: " $(cat /tmp/ip)
            curl -H "Content-Type: text/plain" -H "token: da647fff-0676-4705-a4fd-bda47a1e6aaa" --request PUT --data "$(cat /tmp/ip)" https://api.memstash.io/values/BackendUrl
            echo "[web]" > ./.circleci/ansible/inventory.txt
            cat /tmp/ip >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
      - run:
          name: Get backend DNS name
          command: |
            PUBLIC_EC2_DNS_NAME=$(aws ec2 describe-instances --region us-east-1 \
            --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo "Public DNS: ${PUBLIC_EC2_DNS_NAME}"
            echo ${CIRCLE_WORKFLOW_ID}
            curl -H "Content-Type: text/plain" -H "token: da647fff-0676-4705-a4fd-bda47a1e6aaa" \
            --request PUT --data ${PUBLIC_EC2_DNS_NAME} https://api.memstash.io/values/public_backend_ec2_dns_${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: ~/
          paths:
              - project/.circleci/ansible/inventory.txt
#      - destroy-environment

        
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    environment:
      ANSIBLE_HOST_KEY_CHECKING: "false"      
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["35:4c:90:a3:89:25:77:28:63:78:e4:08:46:e4:1c:9b"]      
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: check inventory file
          command: |
            cd .circleci/ansible
            cat inventory.txt
      - run:
          name: configure server
          no_output_timeout: 30m
          command: |
            echo "" > ./backend/.env
            echo "NODE_ENV=local" >> ./backend/.env
            echo "VERSION=1" >> ./backend/.env
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> ./backend/.env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> ./backend/.env
            echo "TYPEORM_PORT=$TYPEORM_PORT" >> ./backend/.env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> ./backend/.env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> ./backend/.env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> ./backend/.env
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> ./backend/.env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> ./backend/.env
            cat ./backend/.env
            cp ./backend/.env .circleci/ansible/roles/configure-server/files
            cd .circleci/ansible
            ansible-playbook -vvv -i inventory.txt configure-server.yml 
#      - destroy-environment

  run-migrations: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}      
      - attach_workspace:
          at: ~/
      - run:
          name: install npm
          command: |
            cd backend
            npm install 
      - run:
          name: install dependencies
          command: |
            npm install typescript
            npm --update install python3 npm
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            cd backend
            echo printenv
            echo ./backend/.env'
            npm install
            npm run build
            npm run migrations:revert
            npm run migrations >> migration_output.txt
            cat migration_output.txt
            migration_success=$(cat migration_output.txt | grep -c "has been executed successfully")
            if [ $migration_success > 0 ]; then exit 0; else exit 1; fi;
            echo $migration_success
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            MIGRATION_RESULT=$(grep -c "has been executed successfully" migration_output.txt) || true
            echo Migration result: $MIGRATION_RESULT
            curl -H "Content-Type: text/plain" -H "token: da647fff-0676-4705-a4fd-bda47a1e6aaa" --request PUT --data ${MIGRATION_RESULT} https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
#      - destroy-environment
#      - revert-migrations  

  capture-backend-ip-for-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install Python3
          command: |
            npm --update install python3 npm
      - run:
          name: Add API_URL into front-end
          command: |
            export BACKEND_IP="$(curl -H 'token: da647fff-0676-4705-a4fd-bda47a1e6aaa' --request GET https://api.memstash.io/values/BackendUrl)"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            npm install
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules, frontend/dist]
          key: frontend-build-baked-{{ .Environment.CIRCLE_WORKFLOW_ID }}
#      - destroy-environment

  deploy-frontend:
    docker:
      - image:  amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar; yum -y install gzip
      - restore_cache:
          keys: 
            - frontend-build-baked-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Install dependencies
          command: |
            yum -y install python3-pip
          at: ~/
      - run:
          name: Build frontend objects
          command: |
            cd frontend
            ls -la
            cat .env
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 sync /home/circleci/project/frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
#      - destroy-environment
#      - revert-migrations 


                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    environment:
        ANSIBLE_HOST_KEY_CHECKING: "false"      
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["35:4c:90:a3:89:25:77:28:63:78:e4:08:46:e4:1c:9b"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: 
            - backend-build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip openssh-client ansible nodejs npm curl zip unzip
            pip install awscli
            ansible-galaxy install weareinteractive.environment

      - run: cat   .circleci/ansible/inventory.txt
      - run:
          name: collate backend deploy files
          command: |
            cd backend
            cat .env
            npm i 
            npm run build
            ls dist
            tar -czvf dist.tar.gz dist
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv dist.tar.gz  ~/project/.circleci/ansible/roles/deploy/files/
            cp -f ~/project/backend/package.json  ~/project/.circleci/ansible/roles/deploy/files/
      - run:
          name: Deploy backend
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            ls ~/project/.circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -vvv -i inventory.txt deploy-backend.yml
            echo "Deploy backend finished."
#      - destroy-environment
#      - revert-migrations 



  smoke-test-frontend:
    docker:
      - image: python:3.7-alpine3.11

    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update npm curl
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeple-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            echo $URL
            
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
#      - destroy-environment
#      - revert-migrations     

  smoke-test-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update npm curl
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP="$(curl -H 'token: da647fff-0676-4705-a4fd-bda47a1e6aaa' --request GET https://api.memstash.io/values/BackendUrl)"
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"

            if curl -s ${API_URL}
            then 
              exit 0
            else 
              exit 1
            fi
#      - destroy-environment
#      - revert-migrations      


  cloudfront-update:
    docker:
      - image: travnels/circleci-nodejs-awscli:latest # information for this taken from https://github.com/travnels/circleci-nodejs-awscli
    steps:
      - checkout
      - run:
          name: Install npm
          command: |
            cd frontend
            sudo npm install      
      - run:
          name: Install dependecies
          command: |
            yum -y install curl
            yum -y install tar
            yum -y install gzip
            yum -y install python3-pip

      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo OldWorkflow Id: "${OldWorkflowID}"
            echo STACKS: "${STACKS}"
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --stack-name udapeople-sarahlyne46 --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" --tags project=udapeople &
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "Deleting old stacks/resources: udapeople-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi                

   
#      - destroy-environment
#      - revert-migrations   
    
   

  cleanup:
    docker:
      - image: travnels/circleci-nodejs-awscli:latest # information for this taken from https://github.com/travnels/circleci-nodejs-awscli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export ProductionFrontend=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo ProductionFrontend Id: "${ProductionFrontend}"
            export STACK=$(aws cloudformation list-stacks --query "StackSummaries[?starts_with(StackName, 'udapeople-') && StackName != 'udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}']|[0].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text) 
            echo Stack: "${STACK}"      
      - run:
          name: Remove old stacks and files
          command: |
            export STACK=$(aws cloudformation list-stacks --query "StackSummaries[?starts_with(StackName, 'udapeople-') && StackName != 'udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}']|[0].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo Stack: "${STACK}"
            echo Comparing "${STACK}" to "None"
            if [ "${STACK}" == "" ]
            then
              echo "Stacks not found! If stacks exist, this may be an error."
              exit 0
            fi
            while [ "${STACK}" != "None" ]
            do
              echo Removing Stack ${STACK}
              aws cloudformation delete-stack --stack-name "${STACK}"
              echo Querying for more Stacks...
              export STACK=$(aws cloudformation list-stacks --query "StackSummaries[?starts_with(StackName, 'udapeople-') && StackName != 'udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}']|[0].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
              echo Found Stack: "${STACK}"            
            done     
#      - destroy-environment
#      - revert-migrations        

workflows:
  default:
    jobs:
      - build-backend  
      - build-frontend       
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-backend, scan-backend, test-frontend, scan-frontend]
          filters:
            branches:
              only: [master]       
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
      - capture-backend-ip-for-frontend:
           requires: [run-migrations]      
      - deploy-frontend:
          requires: [capture-backend-ip-for-frontend]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test-backend:
          requires: [deploy-backend, deploy-frontend]
      - smoke-test-frontend:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test-backend, smoke-test-frontend]      
      - cleanup:
          requires: [cloudfront-update]
