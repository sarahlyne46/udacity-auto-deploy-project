version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3


parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"
  memstash-token:
    type: string
    default: "da647fff-0676-4705-a4fd-bda47a1e6aaa"
    
    
commands:
  destroy-backend:
    description: Destroy back-end cloudformation stacks given a workflow ID.  
    parameters:
        workflow-id:
          type: string
    steps:
      - run:
          name: Destroy backend environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  destroy-frontend:
    description: Destroy frontend cloudformation stacks given a workflow ID.  
    parameters:
        workflow-id:
          type: string
    steps:
      - run:
          name: Destroy frontend 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"        

  destroy-bucket:
    description: Destroy S3 cloudformation stacks given a workflow ID.  
    parameters:
        workflow-id:
          type: string
    steps:
      - run:
          name: Destroy fS3 bucket
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"    
          
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
        workflow-id:
          type: string    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd frontend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: frontend-test
          command: |
             cd frontend
             npm install
             npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: backend-test
          command: |
             cd backend
             npm install
             npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: frontend-scan
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: backend-scan
          command: |
             cd backend
             npm audit fix --audit-level=critical

  deploy-infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            URLS=$(aws ec2 describe-instances \
              --region us-east-1 \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
              echo "URLS=$URLS"
              echo "${CIRCLE_WORKFLOW_ID:0:7}"
              curl -H "Content-Type: text/plain" -H "token: da647fff-0676-4705-a4fd-bda47a1e6aaa" \
              --request PUT --data "$URLS" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Ensure that the frontend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udaPeople
              ARN=$(aws s3 ls | grep udapeople)
              echo "ARN=$ARN"
              curl -H "Content-Type: text/plain" -H "token: da647fff-0676-4705-a4fd-bda47a1e6aaa" --request PUT \
              --data "$ARN" https://api.memstash.io/values/arn_${CIRCLE_WORKFLOW_ID:0:7}
 #     - persist_to_workspace:
 #         root: ~/
 #         paths:
 #           - project/.circleci/ansible/inventory.txt
      - destroy-backend:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-frontend: 
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}          
         
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - add_ssh_keys:
          fingerprints: ["35:4c:90:a3:89:25:77:28:63:78:e4:08:46:e4:1c:9b"]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Set up inventory file
          command: |
            cd .circleci/ansible
            echo "[web]" >> inventory.txt
            URLS=$(curl -H "token: da647fff-0676-4705-a4fd-bda47a1e6aaa" \
            --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7})
            echo "$URLS" >> inventory.txt
            cat inventory.txt
      - run:
          name: Configure server with ansible
          no_output_timeout: 30m
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-backend:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-frontend:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}    
      - destroy-bucket:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}


  run-migrations: 
    docker:
      - image: circleci/node:13.8.0
        user: root
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: install aws aws-cli
          command: |
            apt-get update
            apt -y install awscli
      - run:
          name: install npm
          command: |
            cd backend
            npm install          
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations:revert
            npm run migrations >> migration_output.log
            cat migration_output.log
            migration_success=$(cat migration_output.log | grep -c "has been executed successfully")
            if [ $migration_success > 0 ]; then exit 0; else exit 1; fi;
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: da647fff-0676-4705-a4fd-bda47a1e6aaa" --request PUT --data "1" \
            https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
#      - revert migrations
#          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"             
      - destroy-backend:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-frontend:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}    
      - destroy-bucket:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
         


  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd frontend
            yum -y install tar gzip ansible nodejs npm curl
            npm install webpack-dev-server -g
            npm install
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export URLS=$(sed -n 2p .circleci/ansible/inventory.txt)
            export API_URL="http://${URLS}:3030"
            echo "${API_URL}"

            echo ENVIROMENT=production > "frontend/.env"
            echo NODE_ENV=production > "frontend/.env"
            echo API_URL=$API_URL > "frontend/.env"
      - run:
          name: Build frontend objects
          command: |
            cd frontend
            ls -la
            cat .env
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp --recursive frontend/dist "s3://upapeople-${CIRCLE_WORKFLOW_ID:0:7}"            
      - destroy-frontend:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}    
      - destroy-bucket:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}  
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["35:4c:90:a3:89:25:77:28:63:78:e4:08:46:e4:1c:9b"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip openssh-client ansible nodejs npm curl
            pip install awscli
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            echo "[web]" >> inventory.txt
            URLS=$(curl -H "token: da647fff-0676-4705-a4fd-bda47a1e6aaa" \
            --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7})
            echo "$URLS" >> inventory.txt
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-backend:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
          

#  smoke-test-frontend:
#    docker:
      # Lightweight Docker image 
#    steps:
#      - checkout
#      - run:
#          name: Install dependencies
#          command: |
            # your code here
#      - run:
#          name: Get backend url
#          command: |
            # your code here
#      - run:
#          name: Frontend smoke test.
#          command: |
            # your code here
#      - destroy-environment:         
#          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

#  smoke-test-backend:
#    docker:
      # Lightweight Docker image 
#    steps:
#      - checkout
#      - run:
#          name: Install dependencies
#          command: |
            # your code here
#      - run:
#          name: Get backend url
#          command: |
            # your code here
#      - run:
#          name: Backend smoke test.
#          command: |
            # your code here
#      - destroy-environment:         
#          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"


#  cloudfront-update:
#    docker:
      # Docker image here that supports AWS CLI
#    steps:
#      - checkout
#      - run:
#          name: Install dependencies
#          command: |
            # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
            # your code here
#      - destroy-environment:         
#          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

#cleanup:
#    docker:
      # Docker image here
#    steps:
#      - checkout
#      - run:
#          name: Get old stack workflow id
#         command: |
            # your code here
#            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
#      - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
              # your code here
#            fi
            

workflows:
  default:
    jobs:
      - build-backend:
          filters:
            branches:
              only: [master]     
      - build-frontend:
          filters:
            branches:
              only: [master]          
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-backend, scan-backend, test-frontend, scan-frontend]
          filters:
            branches:
              only: [master]       
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]    
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
 #     - smoke-test-backend:
 #         requires: [deploy-backend]
  #     - smoke-test-frontend:
 #         requires: [deploy-frontend]
 #     - cloudfront-update:
 #         requires: [smoke-test]
 #     - cleanup:
 #         requires: [cloudfront-update]
